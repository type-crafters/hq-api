name: Deploy Multiple Lambdas

on:
  pull_request_target:
    types:
      - closed
    branches:
      - main
      - develop
  push:
    branches:
      - main
      - develop

permissions:
  id-token: write # Depends on OIDC authentication
  contents: read  # To checkout the repository
  pull-requests: write # To post comments on PRs

env:
  AWS_REGION: us-east-1
  AWS_ROLE_ARN: arn:aws:iam::657506130101:role/GithubActionsLambdaDeployer
  LAMBDA_BASE_PATH: lambda
  LAMBDA_RUNTIME: 3.13
  LAMBDA_HANDLER: lambda_function.lambda_handler

jobs:
  detect-changes:
    if: github.event_name == 'push' || github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      lambdas: ${{ steps.detect.outputs.lambdas }}
      has_changes: ${{ steps.detect.outputs.has_changes }}
      environment: ${{ steps.detect-env.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.merge_commit_sha || github.sha }}

      - name: Detect environment from branch
        id: detect-env
        run: |
          # Detect the branch name
          if [ "${{ github.event_name }}" == "pull_request_target" ]; then
            BRANCH="${{ github.event.pull_request.base.ref }}"
          else
            BRANCH="${{ github.ref_name }}"
          fi
          
          echo "Target branch: $BRANCH"
          
          # Asignar entorno según la rama
          if [[ "$BRANCH" == "main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "Environment: PRODUCTION"
          elif [[ "$BRANCH" == "develop" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "Environment: DEV"
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "Unknown branch, defaulting to DEV"
          fi

      - name: Detect changed Lambda functions
        id: detect
        run: |
          # Get changed files of the PR
          if [ "${{ github.event_name }}" == "pull_request_target" ]; then
            # For PR: compare base with head
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.merge_commit_sha }}"
            # --name-only for listing only file names, in other words, the files that changed
            CHANGED_FILES=$(git diff --name-only $BASE_SHA $HEAD_SHA)
          # Get changed files on push to main
          else
            # HEAD → the last commit
            # HEAD^ → the commit before the last one
            # Para push: comparar con commit anterior
            CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
          fi
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Detect changed lambda folders
          # echo "$CHANGED_FILES" – to print file names

          # grep "^lambda/" – regular expression to filter only files within the lambda/ directory

          # cut -d'/' -f2 – take the second part of the path, for example for lambda/create_project/lambda_function.py it takes 'create_project'

          # sort -u – order names alphabetically and ensure to delete duplicates with (-u = unique).
          CHANGED_LAMBDAS=$(echo "$CHANGED_FILES" | grep "^lambda/" | cut -d'/' -f2 | sort -u)
          
          # -z checks if the variable is empty
          if [ -z "$CHANGED_LAMBDAS" ]; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "lambdas=[]" >> $GITHUB_OUTPUT
            echo "ℹThere are not detected changes in Lambda Functions"
          # if there are changes, output them as a JSON array
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT

            # -R → read text in raw format
            # -s → read input as a string
            # -c → compact output (one line)
            # split("\n") → split by new lines
            # map(select(length > 0)) → apply to each element, selecting only those with length greather than 0 (to filter empty lines) // map apply to each element, select filter
            
            # convert to JSON array
            LAMBDA_JSON=$(echo "$CHANGED_LAMBDAS" | jq -R -s -c 'split("\n") | map(select(length > 0))')
            echo "lambdas=$LAMBDA_JSON" >> $GITHUB_OUTPUT
            
            echo "Modified Lambdas:"
            echo "$CHANGED_LAMBDAS"
          fi

  deploy-lambdas:
    needs: detect-changes # this job depends on the previous one
    if: needs.detect-changes.outputs.has_changes == 'true' # if the variable has_changes from the previous one is true, then run the job
    runs-on: ubuntu-latest
    # strategy allows to run the job multiple times with different parameters
    strategy:
      # for each lambda in the JSON array from the previous job, run the job once
      matrix:
        # since the output is a JSON array stored as a string, we need to convert it back to an array using fromJson
        lambda: ${{ fromJson(needs.detect-changes.outputs.lambdas) }}
      fail-fast: false  # continue other jobs if one fails
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set Lambda configuration
        id: config
        run: |

          ENV="${{ needs.detect-changes.outputs.environment }}"
          BASE_LAMBDA_NAME="hq_api_${{ matrix.lambda }}"
          
          # Add -dev if development environment
          if [ "$ENV" == "dev" ]; then
            LAMBDA_NAME="${BASE_LAMBDA_NAME}-dev"
          else
            LAMBDA_NAME="${BASE_LAMBDA_NAME}"
          fi

          LAMBDA_PATH="${{ env.LAMBDA_BASE_PATH }}/${{ matrix.lambda }}"
          ROLE_NAME="${LAMBDA_NAME}-role"
          
          echo "lambda_name=$LAMBDA_NAME" >> $GITHUB_OUTPUT
          echo "lambda_path=$LAMBDA_PATH" >> $GITHUB_OUTPUT
          echo "role_name=$ROLE_NAME" >> $GITHUB_OUTPUT
          
          echo "Deploying: $LAMBDA_NAME"
          echo "Environment: $ENV"
          echo "Path: $LAMBDA_PATH"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.LAMBDA_RUNTIME }}  # Use the environment variable for Python version

      - name: Install dependencies and package
        run: |
          LAMBDA_PATH="${{ steps.config.outputs.lambda_path }}" # The base path plus the specific lambda folder name
          mkdir -p package # create a folder if it doesn't exist
          
          # Install dependencies if requirements.txt exists
          if [ -f "$LAMBDA_PATH/requirements.txt" ]; then
            # -r to specify the requirements file
            # -t to specify the target directory for installation
            echo "Installing dependencies..."
            pip install -r "$LAMBDA_PATH/requirements.txt" -t ./package
          fi
          
          # Copy all Python files to the package directory
          # 2 stderr 
          # > redirection 
          # target of the redirection is /dev/null to avoid errors if no .py files are found, the os ignores everything sent to /dev/null
          # true to fake a successful copy even if no .py files are found and avoid breaking the script
          cp -r "$LAMBDA_PATH"/*.py ./package/ 2>/dev/null || true
          
          # Create the deployment package as a zip file
          # -r to include all files and folders recursively
          cd package
          zip -r ../lambda-deployment.zip .
          cd ..

          SIZE=$(du -h lambda-deployment.zip | cut -f1)
          echo "✅ Package created: $SIZE"

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check if IAM role exists
        id: check-role
        run: |
          ROLE_NAME="${{ steps.config.outputs.role_name }}"
          
          if aws iam get-role --role-name "$ROLE_NAME" 2>/dev/null; then
            ROLE_ARN=$(aws iam get-role --role-name "$ROLE_NAME" --query 'Role.Arn' --output text)
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "role_arn=$ROLE_ARN" >> $GITHUB_OUTPUT
            echo "Role exists, here is the ARN: $ROLE_ARN"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Role doesn't exist, will create."
          fi

      - name: Create IAM role
        if: steps.check-role.outputs.exists == 'false'
        run: |
          ROLE_NAME="${{ steps.config.outputs.role_name }}"
          
          cat > trust-policy.json <<'EOF'
          {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Principal": {"Service": "lambda.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }]
          }
          EOF
          
          aws iam create-role \
            --role-name "$ROLE_NAME" \
            --assume-role-policy-document file://trust-policy.json
          
          aws iam attach-role-policy \
            --role-name "$ROLE_NAME" \
            --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          
          echo "Waiting role propagation..."
          sleep 15

          # Retry fetching the role ARN a few times in case of eventual consistency issues
          for i in {1..5}; do
            ROLE_ARN=$(aws iam get-role --role-name "$ROLE_NAME" --query 'Role.Arn' --output text 2>/dev/null) && break
            echo "Role not ready yet... retrying in 5s ($i/5)"
            sleep 5
          done
          
          # Final check
          if [ -z "$ROLE_ARN" ]; then
            echo "Could not fetch role ARN after waiting."
            exit 1
          fi
          
          echo "Role ARN: $ROLE_ARN"
          echo "role_arn=$ROLE_ARN" >> $GITHUB_OUTPUT

      - name: Get role ARN
        id: role
        run: |
          if [ "${{ steps.check-role.outputs.exists }}" == "true" ]; then
            echo "role_arn=${{ steps.check-role.outputs.role_arn }}" >> $GITHUB_OUTPUT
          else
            ROLE_NAME="${{ steps.config.outputs.role_name }}"
            ROLE_ARN=$(aws iam get-role --role-name "$ROLE_NAME" --query 'Role.Arn' --output text)
            echo "role_arn=$ROLE_ARN" >> $GITHUB_OUTPUT
          fi

      - name: Check if Lambda exists
        id: check-lambda
        run: |
          LAMBDA_NAME="${{ steps.config.outputs.lambda_name }}"
          
          if aws lambda get-function --function-name "$LAMBDA_NAME" 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Load environment variables from file
        id: load-env
        run: |
          LAMBDA_PATH="${{ steps.config.outputs.lambda_path }}"
          ENV="${{ needs.detect-changes.outputs.environment }}"
          
          # Select the correct .env file based on the environment
          if [ "$ENV" == "production" ]; then
            ENV_FILE="$LAMBDA_PATH/.env.production"
          else
            ENV_FILE="$LAMBDA_PATH/.env.dev"
          fi
          
          echo "Looking for: $ENV_FILE"
          
          if [ -f "$ENV_FILE" ]; then
            # Read the .env file, ignore comments and empty lines, convert new lines to commas
            ENV_VARS=$(cat "$ENV_FILE" | grep -v '^#' | grep -v '^$' | tr '\n' ',' | sed 's/,$//')
            
            # Add the ENV variable to the list
            ENV_VARS="ENV=$ENV,${ENV_VARS}"
            
            # # Procesar secrets si el archivo los menciona
            # if grep -q "APP_PASSWORD" "$ENV_FILE"; then
            #   ENV_VARS="${ENV_VARS},APP_PASSWORD=${{ secrets.EMAIL_APP_PASSWORD }}"
            # fi
            
            echo "env_vars=$ENV_VARS" >> $GITHUB_OUTPUT
            echo "has_env=true" >> $GITHUB_OUTPUT
            echo "Loaded environment variables from $ENV_FILE"
            echo "Variables: $ENV_VARS"
          else
            # If file doesn't exist, finish deployment
            # ENV_VARS="ENV=$ENV"
            echo "env_vars=$ENV_VARS" >> $GITHUB_OUTPUT
            echo "has_env=true" >> $GITHUB_OUTPUT
            echo "No $ENV_FILE found, exiting process"
            exit 1
          fi

      - name: Create Lambda function
        if: steps.check-lambda.outputs.exists == 'false'
        run: |
          ROLE_ARN="${{ steps.check-role.outputs.role_arn || steps.create-role.outputs.role_arn }}"
          
          aws lambda create-function \
            --function-name "${{ steps.config.outputs.lambda_name }}" \
            --runtime "python${{ env.LAMBDA_RUNTIME }}" \
            --role "$ROLE_ARN" \
            --handler "${{ env.LAMBDA_HANDLER }}" \
            --zip-file fileb://lambda-deployment.zip \
            --timeout 30 \
            --memory-size 256 \
            --environment "Variables={${{ steps.load-env.outputs.env_vars }}}" \
            --description "Lambda: ${{ matrix.lambda }} | Env: ${{ steps.config.outputs.environment }} | Commit: ${{ github.sha }}"
          
          echo "✅ Lambda created: ${{ steps.config.outputs.lambda_name }}"

      - name: Update Lambda code
        if: steps.check-lambda.outputs.exists == 'true'
        run: |
          aws lambda update-function-code \
            --function-name "${{ steps.config.outputs.lambda_name }}" \
            --zip-file fileb://lambda-deployment.zip
          
          echo "✅ Lambda code updated: ${{ steps.config.outputs.lambda_name }}"

      - name: Wait for code update
        if: steps.check-lambda.outputs.exists == 'true'
        run: |
          echo "⏳ Waiting for code update to complete..."
          aws lambda wait function-updated \
            --function-name "${{ steps.config.outputs.lambda_name }}"

      - name: Update Lambda configuration
        if: steps.check-lambda.outputs.exists == 'true'
        run: |
          aws lambda update-function-configuration \
            --function-name "${{ steps.config.outputs.lambda_name }}" \
            --timeout 30 \
            --memory-size 256 \
            --environment "Variables={${{ steps.load-env.outputs.env_vars }}}"
          
          echo "✅ Lambda configuration updated: ${{ steps.config.outputs.lambda_name }}"

      - name: Wait for configuration update
        run: |
          echo "⏳ Waiting for configuration update to complete..."
          aws lambda wait function-updated \
            --function-name "${{ steps.config.outputs.lambda_name }}"

      - name: Publish version
        id: publish
        run: |
          VERSION=$(aws lambda publish-version \
            --function-name "${{ steps.config.outputs.lambda_name }}" \
            --description "Deploy ${{ matrix.lambda }} (${{ steps.config.outputs.environment }}) - ${{ github.sha }}" \
            --query 'Version' \
            --output text)
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "🎉 Published version: $VERSION"

      - name: Summary
        run: |
          ENV="${{ steps.config.outputs.environment == 'production' }}" # && '🚀' || '🔧' }}"

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ ${{ steps.config.outputs.lambda_name }}" >> $GITHUB_STEP_SUMMARY
          echo "| **Environment** | \`${{ steps.config.outputs.environment }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Version** | \`${{ steps.publish.outputs.version }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Runtime** | \`python${{ env.LAMBDA_RUNTIME }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Path** | \`${{ steps.config.outputs.lambda_path }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Commit** | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY

  comment-on-pr:
    needs: [detect-changes, deploy-lambdas]
    if: github.event_name == 'pull_request_target' && needs.detect-changes.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Comment deployment results
        uses: actions/github-script@v7
        with:
          script: |
            const lambdas = JSON.parse('${{ needs.detect-changes.outputs.lambdas }}');
            const environment = '${{ needs.detect-changes.outputs.environment }}';
            const emoji = environment === 'production' ? '🚀' : '🔧';
            const envUpper = environment.toUpperCase();
            
            let message = `## ${emoji} Lambda Deployments - ${envUpper}\n\n`;
            message += `Successfully deployed **${lambdas.length}** function(s) to **${envUpper}**:\n\n`;
            
            const suffix = environment === 'dev' ? '-dev' : '';
            lambdas.forEach(lambda => {
              message += `- ✅ \`hq_api_${lambda}${suffix}\`\n`;
            });

            message += `\n**Deployment Details:**\n`;
            message += `- 🌍 **Environment:** \`${environment}\`\n`;
            message += `- 📍 **Region:** \`${{ env.AWS_REGION }}\`\n`;
            message += `- 🔖 **Commit:** \`${{ github.sha }}\`\n`;
            message += `- ⏰ **Time:** ${new Date().toUTCString()}\n`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });